<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>計算機圖形學 on L1Mat2X&#39;Blog - 學無止儘</title>
    <link>https://blog.matrixs.site/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E5%9C%96%E5%BD%A2%E5%AD%B8/</link>
    <description>Recent content in 計算機圖形學 on L1Mat2X&#39;Blog - 學無止儘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 29 Sep 2020 09:46:22 +0800</lastBuildDate>
    
	<atom:link href="https://blog.matrixs.site/tags/%E8%A8%88%E7%AE%97%E6%A9%9F%E5%9C%96%E5%BD%A2%E5%AD%B8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>圖形學系列 Ch10-Surface Shading-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-09-25-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch10-surface-shading-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 29 Sep 2020 09:46:22 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-09-25-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch10-surface-shading-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>在第四章的4.5節已經簡單介紹過兩個shading模型，Lambertian Shading和Blinn-Phong Shading，以及Amb</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch9-Signal Processing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-09-14-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B9%9D%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch9-signal-processing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Fri, 25 Sep 2020 08:10:58 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-09-14-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B9%9D%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch9-signal-processing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;在圖形學中，經常需要處理連續函數，但是，計算機只能處理離散的數據，通常的做法就是將連續函數離散化后交給計算機處理，之後在重建出連續函數。生活中也有許多離散化的例子，例如數碼相機拍照、手寫數位板以及CT掃描等。&lt;/p&gt;
&lt;p&gt;本章將先從一維數字信號的采樣和重建。然後介紹一維和二維采樣和重建背後的數學原理和算法。最後將從頻域的角度深入討論。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch8-the Graphic Pipeline-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-09-03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AB%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch8-the-graphic-pipeline-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Thu, 03 Sep 2020 19:08:03 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-09-03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AB%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch8-the-graphic-pipeline-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;本章节介绍第二种（第一种是第四章中的&lt;code&gt;ray tracing&lt;/code&gt;）渲染方式：逐个将物体绘制到屏幕上。两者的不同在于：&lt;code&gt;ray tracing&lt;/code&gt;是&lt;strong&gt;每个像素&lt;/strong&gt;会被哪些几何图元影响，而本章节中的渲染方式是&lt;strong&gt;每个几何图元&lt;/strong&gt;影响哪些像素。这种处理几何图元占据图像像素的过程称为&lt;strong&gt;光栅化&lt;/strong&gt;，这种对物体逐个光栅化的过程称为&lt;strong&gt;光柵化渲染&lt;/strong&gt;。這種起始於物體，終止于圖像像素更新的流程稱爲&lt;strong&gt;圖形化管綫(graphic pipeline)&lt;/strong&gt;。本章先從光柵化開始，在介紹其前後的流程分別如何進行的。&lt;code&gt;Graphic pipeline&lt;/code&gt;整個過程如下圖所示。&lt;/p&gt;
&lt;center&gt;&lt;img src = &#34;figure8.1.png&#34; style = &#34;zoom:70%&#34;&gt;&lt;/img&gt;&lt;/center&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch7 Viewing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-31-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B8%83%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch7-viewing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Mon, 31 Aug 2020 14:41:33 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-31-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B8%83%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch7-viewing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;從3D空間到2D空間中的映射稱爲&lt;code&gt;viewing transformation&lt;/code&gt;。本章將學習如何利用矩陣運算，將已知的3D空間物體映射（可能是平行投影，也可能是透視投影）到2D空間（像平面）中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch6 Transformation Matrices-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch6-transformation-matrices-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Fri, 21 Aug 2020 17:15:33 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch6-transformation-matrices-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>6.1 2D-綫性變換 6.1.1 Scaling $$ scale(s_x, s_y) = \begin{bmatrix} s_x,&amp;amp; 0 \\ 0,&amp;amp; s_y \end{bmatrix} $$ 6.1.2 Shearing $$ shear_x(s) = \begin{bmatrix} 1,&amp;amp; s\\ 0,&amp;amp; 1 \end{bmatrix} = \begin{bmatrix} 1,&amp;amp; \tan{\phi}\\ 0,&amp;amp; 1 \end{bmatrix} $$ $$ shear_y(s) = \begin{bmatrix} 1, &amp;amp; 0\\ s, &amp;amp; 1 \end{bmatrix} = \begin{bmatrix} 1,&amp;amp; 0\\ \tan{\phi},&amp;amp; 1 \end{bmatrix} $$ 6.1.3 Rotation $\phi$逆時</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch4 Ray Tracing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-18-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch4-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 18 Aug 2020 09:56:10 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-18-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch4-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>4.1 - Ray Tracing算法框架 Basic Ray Tracing分为三个部分： ray generation: 计算光源位置和光线方向； ray intersection: 计算与光路相交的最近的物体； shading: 基于ray inte</description>
    </item>
    
  </channel>
</rss>