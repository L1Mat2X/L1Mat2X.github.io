<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>L1Mat2X&#39;Blog - 學無止儘</title>
    <link>https://blog.matrixs.site/</link>
    <description>Recent content on L1Mat2X&#39;Blog - 學無止儘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Jun 2021 09:37:16 +0800</lastBuildDate>
    
	<atom:link href="https://blog.matrixs.site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>圖形學系列 Ch24-Reflection Models-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2021-06-22-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch24-reflection-models-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 22 Jun 2021 09:37:16 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-06-22-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch24-reflection-models-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;在第十八章中介紹了BRDF，它描述了光綫經過反射表面作用后的變化。在本章中，繼續討論某種材料對於視覺上最重要的屬性，並介紹一些有助於捕捉這些屬性的簡單模型。圖形學中大量使用了BRDF模型，本章介紹的模型是爲了給出非漫反射BRDF的概念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法系列 Meijster距離變換算法學習</title>
      <link>https://blog.matrixs.site/post/2021-05-15-%E5%9C%96%E5%83%8F%E8%99%95%E7%90%86-meijster%E8%B7%9D%E9%9B%A2%E8%AE%8A%E6%8F%9B/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97-meijster%E8%B7%9D%E9%9B%A2%E8%AE%8A%E6%8F%9B%E7%AE%97%E6%B3%95%E5%AD%B8%E7%BF%92.html</link>
      <pubDate>Thu, 20 May 2021 11:13:35 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-05-15-%E5%9C%96%E5%83%8F%E8%99%95%E7%90%86-meijster%E8%B7%9D%E9%9B%A2%E8%AE%8A%E6%8F%9B/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97-meijster%E8%B7%9D%E9%9B%A2%E8%AE%8A%E6%8F%9B%E7%AE%97%E6%B3%95%E5%AD%B8%E7%BF%92.html</guid>
      <description>論文《A General algorithm for computing distance transforms in linear time》閲讀筆記整理。 Introduction 距離變換本質是計算點到點的距離，如果在二維空間中，可以按如下方式描述。 假設$B$為尺寸為$</description>
    </item>
    
    <item>
      <title>算法系列 Timsort排序算法原理學習</title>
      <link>https://blog.matrixs.site/post/2021-04-27-%E5%9F%BA%E7%A4%8E%E7%AE%97%E6%B3%95-timsort%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97-timsort%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%AD%B8%E7%BF%92.html</link>
      <pubDate>Tue, 27 Apr 2021 14:16:53 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-04-27-%E5%9F%BA%E7%A4%8E%E7%AE%97%E6%B3%95-timsort%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97-timsort%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%AD%B8%E7%BF%92.html</guid>
      <description>&lt;p&gt;最近在實際應用中頻繁遇到快速排序算法(&lt;code&gt;qsort&lt;/code&gt;)最壞情況，其實際耗時遠超過想象。主要原因在於進行排序的數據并非完全無序的，因此借此機會瞭解了當下使用廣汎的排序算法&lt;code&gt;Timsort&lt;/code&gt;，特此記錄。本文不涉及具體代碼實現，但是會結合自己實現過程給出僞代碼，如有錯誤歡迎指正。&lt;/p&gt;
&lt;p&gt;本文會從原理出發給出各個部分實現僞代碼，最後再討論細節。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch14-Sampling-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2021-04-19-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch14-sampling-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Mon, 19 Apr 2021 08:56:20 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-04-19-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch14-sampling-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;本章又是數學的内容，主要介紹采樣相關的方法與數學工具——蒙特卡洛積分、Metropolis方法等。這些技術在全局光照和路徑追蹤等方面得到有效利用。本章二十幾頁的内容其實并沒有説清楚很多事，所以需要自行查找或補充一些知識才能搞懂。比如，&lt;code&gt;Measure（測度）&lt;/code&gt;這個概念，在原書第二版中文版中，被翻譯成&lt;code&gt;度量&lt;/code&gt;，通篇讀下來感覺非常怪異，最後查找資料發現應該稱它為&lt;code&gt;測度&lt;/code&gt;，可以說&lt;code&gt;測度論&lt;/code&gt;是現代概率論的基石&lt;sup&gt;[1]&lt;/sup&gt;，兩者的關係可以類比成微積分和數學分析閒的關係，這裏就不多説了，有興趣可以自行查找資料。之後的内容我會盡量表達清楚，并把查閲的相關資料補充在後面，也限制於自己的能力，如有錯誤或不足歡迎指正。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Game101-Homework5 Generating Camera Rays</title>
      <link>https://blog.matrixs.site/post/2021-03-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-games101%E4%BD%9C%E4%B8%9A5%E8%A1%A5%E5%85%85/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-game101-homework5-generating-camera-rays.html</link>
      <pubDate>Mon, 29 Mar 2021 10:30:41 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-03-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-games101%E4%BD%9C%E4%B8%9A5%E8%A1%A5%E5%85%85/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-game101-homework5-generating-camera-rays.html</guid>
      <description>本文内容為個人做Games101課程作業-5時遇到問題的一個記錄，主要為説明作業中如何生成一條Primary Ray或Camera Ray。不知</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch23-Global Illumination-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2021-03-23-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch23-global-illumination-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 23 Mar 2021 10:35:31 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-03-23-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch23-global-illumination-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;現實中，許多物體表面接受到的光不僅僅來自光源，還來自其他反射表面。這通常被稱爲間接光照或相互光照。根據這一性質可知，任意一個表面都可能被場景中所有其他表面照亮，這就導致計算複雜度為$\mathcal{O}(N^2)$，因此這一問題的處理也被稱爲“全局光照問題”。本章節就將介紹兩種處理方式：&lt;strong&gt;Particle Tracing&lt;/strong&gt;和&lt;strong&gt;Path Tracing&lt;/strong&gt;，最後將討論直接光照。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>豐衣足食系列-小米路由器4刷OpenWrt固件</title>
      <link>https://blog.matrixs.site/post/2021-03-21-%E8%B1%90%E8%A1%A3%E8%B6%B3%E9%A3%9F-%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A84%E5%88%B7openwrt/%E8%B1%90%E8%A1%A3%E8%B6%B3%E9%A3%9F%E7%B3%BB%E5%88%97-%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A84%E5%88%B7openwrt%E5%9B%BA%E4%BB%B6.html</link>
      <pubDate>Sun, 21 Mar 2021 10:35:51 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-03-21-%E8%B1%90%E8%A1%A3%E8%B6%B3%E9%A3%9F-%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A84%E5%88%B7openwrt/%E8%B1%90%E8%A1%A3%E8%B6%B3%E9%A3%9F%E7%B3%BB%E5%88%97-%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A84%E5%88%B7openwrt%E5%9B%BA%E4%BB%B6.html</guid>
      <description>最近把家裏閑置的小米路由器4刷成OpenWrt系統，特此記錄流程。 聲明 刷機有風險，入坑需謹慎！刷機后無法官方維修！凡是刷第三方固件出现的财务</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch18-Light-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2021-02-25-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch18-light-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Thu, 25 Feb 2021 09:17:56 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-02-25-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch18-light-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;本章節介紹測量光綫的一個工具 —— &lt;code&gt;Radiometry&lt;/code&gt;，該工具對於計算機圖形學來説非常重要。本章節還包含&lt;code&gt;Photometry&lt;/code&gt;，它用於量化Radiometry，並通過縮放來估計有多少“有用”的光綫。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch13-More Ray Tracing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2021-01-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch13-more-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Thu, 21 Jan 2021 09:19:39 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-01-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch13-more-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>光綫追蹤技術是產生一些高級渲染效果的基礎，在第四章已經介紹了光綫追蹤的框架，本章節將討論光綫追蹤一些有趣的使用，比如光綫與不同材質物體是如何</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch12-Data Structures for Graphics-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-11-26-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch12-data-structures-for-graphics-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Thu, 26 Nov 2020 09:34:30 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-11-26-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch12-data-structures-for-graphics-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;本節介紹圖形學中最基本的，最常用的幾種數據結構：網格結構(&lt;code&gt;mesh structures&lt;/code&gt;)，空間數據結構(&lt;code&gt;spatial data structures&lt;/code&gt;)，場景圖(&lt;code&gt;scene graphs&lt;/code&gt;)和平鋪多維數組(&lt;code&gt;tiled multidimensional arrays&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;網格結構中將介紹“翼邊”結構(&lt;code&gt;the winged-edge data structure&lt;/code&gt;)和“半邊”結構(&lt;code&gt;the half-edge structure&lt;/code&gt;)。這兩種結構在管理模型時非常有效，特別是在模型簡化或細分時；場景圖主要用於管理場景中物體閒的關係與變換等；對於空間數據結構，主要介紹三種管理空間物體的方法——BVH、層級空間細分和均匀空間細分；最後平鋪多維數組介紹如何提高内存訪問效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch11-Texture Mapping-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-09-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch11-texture-mapping-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 29 Sep 2020 10:26:56 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-09-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch11-texture-mapping-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;何爲紋理？在圖形學中，定義物體表面空間變化屬性，即隨著空間位置變換，物體表面呈現出不同屬性，但這種屬性并未真的改變整個物體表面形狀，我們將這種變換的屬性稱爲物體表面紋理。&lt;/p&gt;
&lt;p&gt;圖形學中，爲了在物體表面獲得紋理效果，會使用&lt;strong&gt;紋理映射(texture mapping)&lt;strong&gt;技術：該技術使用一幅圖像，稱爲紋理圖（&lt;code&gt;texture map&lt;/code&gt;、&lt;code&gt;texture image&lt;/code&gt;或&lt;code&gt;texture&lt;/code&gt;），該圖像包含所有物體表面紋理信息，然後通過數學上的&lt;/strong&gt;映射&lt;/strong&gt;，將該圖像“放置”到物體表面。&lt;/p&gt;
&lt;p&gt;本章討論紋理表示物體表面細節、陰影和反射。基本思想比較簡單，但是在實際應用中會遇到一些問題。第一，紋理圖通常需要扭曲使用，因此設計紋理圖到物體表面的函數映射關係是一個巨大的挑戰；第二，紋理映射是一個重采樣過程，重采樣就容易出現走樣現象，許多紋理映射器的複雜度高就是爲了解決這些走樣失真導致的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch10-Surface Shading-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-09-25-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch10-surface-shading-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 29 Sep 2020 09:46:22 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-09-25-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E5%8D%81%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch10-surface-shading-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>在第四章的4.5節已經簡單介紹過兩個shading模型，Lambertian Shading和Blinn-Phong Shading，以及Amb</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch9-Signal Processing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-09-14-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B9%9D%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch9-signal-processing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Fri, 25 Sep 2020 08:10:58 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-09-14-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B9%9D%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch9-signal-processing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;在圖形學中，經常需要處理連續函數，但是，計算機只能處理離散的數據，通常的做法就是將連續函數離散化后交給計算機處理，之後在重建出連續函數。生活中也有許多離散化的例子，例如數碼相機拍照、手寫數位板以及CT掃描等。&lt;/p&gt;
&lt;p&gt;本章將先從一維數字信號的采樣和重建。然後介紹一維和二維采樣和重建背後的數學原理和算法。最後將從頻域的角度深入討論。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch8-the Graphic Pipeline-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-09-03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AB%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch8-the-graphic-pipeline-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Thu, 03 Sep 2020 19:08:03 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-09-03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AB%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch8-the-graphic-pipeline-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;本章节介绍第二种（第一种是第四章中的&lt;code&gt;ray tracing&lt;/code&gt;）渲染方式：逐个将物体绘制到屏幕上。两者的不同在于：&lt;code&gt;ray tracing&lt;/code&gt;是&lt;strong&gt;每个像素&lt;/strong&gt;会被哪些几何图元影响，而本章节中的渲染方式是&lt;strong&gt;每个几何图元&lt;/strong&gt;影响哪些像素。这种处理几何图元占据图像像素的过程称为&lt;strong&gt;光栅化&lt;/strong&gt;，这种对物体逐个光栅化的过程称为&lt;strong&gt;光柵化渲染&lt;/strong&gt;。這種起始於物體，終止于圖像像素更新的流程稱爲&lt;strong&gt;圖形化管綫(graphic pipeline)&lt;/strong&gt;。本章先從光柵化開始，在介紹其前後的流程分別如何進行的。&lt;code&gt;Graphic pipeline&lt;/code&gt;整個過程如下圖所示。&lt;/p&gt;
&lt;center&gt;&lt;img src = &#34;figure8.1.png&#34; style = &#34;zoom:70%&#34;&gt;&lt;/img&gt;&lt;/center&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch7 Viewing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-31-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B8%83%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch7-viewing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Mon, 31 Aug 2020 14:41:33 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-31-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B8%83%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch7-viewing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;從3D空間到2D空間中的映射稱爲&lt;code&gt;viewing transformation&lt;/code&gt;。本章將學習如何利用矩陣運算，將已知的3D空間物體映射（可能是平行投影，也可能是透視投影）到2D空間（像平面）中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch6 Transformation Matrices-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch6-transformation-matrices-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Fri, 21 Aug 2020 17:15:33 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch6-transformation-matrices-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>6.1 2D-綫性變換 6.1.1 Scaling $$ scale(s_x, s_y) = \begin{bmatrix} s_x,&amp;amp; 0 \\ 0,&amp;amp; s_y \end{bmatrix} $$ 6.1.2 Shearing $$ shear_x(s) = \begin{bmatrix} 1,&amp;amp; s\\ 0,&amp;amp; 1 \end{bmatrix} = \begin{bmatrix} 1,&amp;amp; \tan{\phi}\\ 0,&amp;amp; 1 \end{bmatrix} $$ $$ shear_y(s) = \begin{bmatrix} 1, &amp;amp; 0\\ s, &amp;amp; 1 \end{bmatrix} = \begin{bmatrix} 1,&amp;amp; 0\\ \tan{\phi},&amp;amp; 1 \end{bmatrix} $$ 6.1.3 Rotation $\phi$逆時</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch4 Ray Tracing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-18-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch4-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 18 Aug 2020 09:56:10 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-18-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch4-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>4.1 - Ray Tracing算法框架 Basic Ray Tracing分为三个部分： ray generation: 计算光源位置和光线方向； ray intersection: 计算与光路相交的最近的物体； shading: 基于ray inte</description>
    </item>
    
    <item>
      <title>Ellipse Fitting</title>
      <link>https://blog.matrixs.site/post/2019-08-20_ellipse_fitting/ellipse-fitting.html</link>
      <pubDate>Tue, 20 Aug 2019 10:16:57 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2019-08-20_ellipse_fitting/ellipse-fitting.html</guid>
      <description>橢圓擬合的方法大致可以分爲兩種，一是聚類，二是最小二乘法。其中，聚類的方法主要是基於將待擬合點映射到參數空間中，這種方法的典型就是霍夫變換。</description>
    </item>
    
    <item>
      <title>Blob特征提取介紹</title>
      <link>https://blog.matrixs.site/post/2019-02-19_blog_analysis/blog-analysis.html</link>
      <pubDate>Thu, 14 Feb 2019 10:07:06 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2019-02-19_blog_analysis/blog-analysis.html</guid>
      <description>原点矩、中心距、Hu矩 最早接触矩是在《概率论与数理统计》中，下面给出书中的对于矩的定义： 设$X$为随机变量，$c$为常数，$k$为正整数。则</description>
    </item>
    
    <item>
      <title>Camera Calibration</title>
      <link>https://blog.matrixs.site/post/2018-04-27_%E7%9B%B8%E6%A9%9F%E6%A8%99%E5%AE%9A/camera-calibration.html</link>
      <pubDate>Fri, 27 Apr 2018 10:40:53 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2018-04-27_%E7%9B%B8%E6%A9%9F%E6%A8%99%E5%AE%9A/camera-calibration.html</guid>
      <description>符号约定 WCS —— 世界坐标系 CCS —— 相机坐标系 IPCS——像平面坐标系 ICS——图像坐标系 $(x_w, y_w, z_w)$ ——世界坐标系点坐标 $(x_c, y_c, z_c)$——相机坐标系点</description>
    </item>
    
    <item>
      <title>利用OpenCV第三方库编译Leptonica</title>
      <link>https://blog.matrixs.site/post/2017-06-17-leptonica-%E7%BC%96%E8%AF%91leptonica/%E5%88%A9%E7%94%A8opencv%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BC%96%E8%AF%91leptonica.html</link>
      <pubDate>Sat, 17 Jun 2017 13:39:59 +0000</pubDate>
      
      <guid>https://blog.matrixs.site/post/2017-06-17-leptonica-%E7%BC%96%E8%AF%91leptonica/%E5%88%A9%E7%94%A8opencv%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BC%96%E8%AF%91leptonica.html</guid>
      <description>OpenCV对于做计算机视觉这一行的人肯定非常熟悉，相较于它，另外一个开源库Leptonica就相对小众很多。Leptonica主要是面向教</description>
    </item>
    
    <item>
      <title>Tesseract系列-How to Build Tesseract 3.04 with VS2013</title>
      <link>https://blog.matrixs.site/post/2016-07-06-tesseract-2-how-to-build-tesseract-3-dot-04-with-vs2013/</link>
      <pubDate>Wed, 06 Jul 2016 14:08:16 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2016-07-06-tesseract-2-how-to-build-tesseract-3-dot-04-with-vs2013/</guid>
      <description>要了解Tesseract OCR除了查阅一些文献，最好能跟跟源码。 由于Google已经开放了Tesseract OCR的源码，通过简单的编译，就</description>
    </item>
    
    <item>
      <title>OpenCV源码环境配置（2.X版及3.X版 &#43; VS2008/VS2013 &#43; win7 x86）</title>
      <link>https://blog.matrixs.site/post/2016-03-28-opencv%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2016-03-28-opencv%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
      <pubDate>Mon, 28 Mar 2016 11:40:19 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2016-03-28-opencv%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2016-03-28-opencv%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
      <description>OpenCV作为一个十分优秀的跨平台计算机视觉库，我们不仅可以使用其提供的工具，有时更希望能了解其实现机制，然后修改它，进化它。因此构建一个</description>
    </item>
    
  </channel>
</rss>