<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Games101 on L1Mat2X&#39;Blog - 學無止儘</title>
    <link>https://blog.matrixs.site/categories/games101/</link>
    <description>Recent content in Games101 on L1Mat2X&#39;Blog - 學無止儘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Jun 2021 09:37:16 +0800</lastBuildDate>
    
	<atom:link href="https://blog.matrixs.site/categories/games101/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>圖形學系列 Ch24-Reflection Models-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2021-06-22-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch24-reflection-models-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 22 Jun 2021 09:37:16 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-06-22-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch24-reflection-models-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;在第十八章中介紹了BRDF，它描述了光綫經過反射表面作用后的變化。在本章中，繼續討論某種材料對於視覺上最重要的屬性，並介紹一些有助於捕捉這些屬性的簡單模型。圖形學中大量使用了BRDF模型，本章介紹的模型是爲了給出非漫反射BRDF的概念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列 Game101-Homework5 Generating Camera Rays</title>
      <link>https://blog.matrixs.site/post/2021-03-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-games101%E4%BD%9C%E4%B8%9A5%E8%A1%A5%E5%85%85/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-game101-homework5-generating-camera-rays.html</link>
      <pubDate>Mon, 29 Mar 2021 10:30:41 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-03-29-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-games101%E4%BD%9C%E4%B8%9A5%E8%A1%A5%E5%85%85/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-game101-homework5-generating-camera-rays.html</guid>
      <description>本文内容為個人做Games101課程作業-5時遇到問題的一個記錄，主要為説明作業中如何生成一條Primary Ray或Camera Ray。不知</description>
    </item>
    
    <item>
      <title>圖形學系列 Ch23-Global Illumination-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2021-03-23-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch23-global-illumination-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 23 Mar 2021 10:35:31 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2021-03-23-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9C%96%E5%BD%A2%E5%AD%B8-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E7%AB%A0%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch23-global-illumination-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;現實中，許多物體表面接受到的光不僅僅來自光源，還來自其他反射表面。這通常被稱爲間接光照或相互光照。根據這一性質可知，任意一個表面都可能被場景中所有其他表面照亮，這就導致計算複雜度為$\mathcal{O}(N^2)$，因此這一問題的處理也被稱爲“全局光照問題”。本章節就將介紹兩種處理方式：&lt;strong&gt;Particle Tracing&lt;/strong&gt;和&lt;strong&gt;Path Tracing&lt;/strong&gt;，最後將討論直接光照。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch7 Viewing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-31-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B8%83%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch7-viewing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Mon, 31 Aug 2020 14:41:33 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-31-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E4%B8%83%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch7-viewing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>&lt;p&gt;從3D空間到2D空間中的映射稱爲&lt;code&gt;viewing transformation&lt;/code&gt;。本章將學習如何利用矩陣運算，將已知的3D空間物體映射（可能是平行投影，也可能是透視投影）到2D空間（像平面）中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch6 Transformation Matrices-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch6-transformation-matrices-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Fri, 21 Aug 2020 17:15:33 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-21-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch6-transformation-matrices-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>6.1 2D-綫性變換 6.1.1 Scaling $$ scale(s_x, s_y) = \begin{bmatrix} s_x,&amp;amp; 0 \\ 0,&amp;amp; s_y \end{bmatrix} $$ 6.1.2 Shearing $$ shear_x(s) = \begin{bmatrix} 1,&amp;amp; s\\ 0,&amp;amp; 1 \end{bmatrix} = \begin{bmatrix} 1,&amp;amp; \tan{\phi}\\ 0,&amp;amp; 1 \end{bmatrix} $$ $$ shear_y(s) = \begin{bmatrix} 1, &amp;amp; 0\\ s, &amp;amp; 1 \end{bmatrix} = \begin{bmatrix} 1,&amp;amp; 0\\ \tan{\phi},&amp;amp; 1 \end{bmatrix} $$ 6.1.3 Rotation $\phi$逆時</description>
    </item>
    
    <item>
      <title>圖形學系列-Ch4 Ray Tracing-閲讀筆記</title>
      <link>https://blog.matrixs.site/post/2020-08-18-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch4-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</link>
      <pubDate>Tue, 18 Aug 2020 09:56:10 +0800</pubDate>
      
      <guid>https://blog.matrixs.site/post/2020-08-18-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9C%96%E5%BD%A2%E5%AD%B8%E7%B3%BB%E5%88%97-ch4-ray-tracing-%E9%96%B2%E8%AE%80%E7%AD%86%E8%A8%98.html</guid>
      <description>4.1 - Ray Tracing算法框架 Basic Ray Tracing分为三个部分： ray generation: 计算光源位置和光线方向； ray intersection: 计算与光路相交的最近的物体； shading: 基于ray inte</description>
    </item>
    
  </channel>
</rss>